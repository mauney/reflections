What happens when you initialize a repository? Why do you need to do it?

    Git creates a hidden directory (.git) to store the files needed to track 
    version history. This needs to be done each time a git repository is 
    created so that git has the needed tools in place to do its job.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area does not hold references to all the files in the working 
    directory, only the files for which I want to track changes. Unlike the 
    repositiry, the staging area refers to files with changes that have yet to 
    be commited. This allows a user to be selective about what files are 
    included in a commit.

How can you use the staging area to make sure you have one commit per logical
change?

    If two logical changes do not have any common files, I can add just the 
    files for the first change to the staging area, commit those file changes, 
    and then stage the files pertaining to the second logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches may be helpful when I want to try out two different directions 
    with my project, or if I want to keep the current, functioning brach as-is 
    while I experiment with a new feature or approach.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
